{"version":3,"sources":["../node_modules/geotiff/dist-module/compression/lzw.js"],"names":["_basedecoder","_interopRequireDefault","require","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","_getPrototypeOf","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","e","valueOf","getPrototypeOf","MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","d","a","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","pow","chunks","chunk2","hi","appendReversed","dest","source","push","decompress","dictionaryIndex","Uint16Array","dictionaryChar","Uint8Array","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","n","rev","oldCode","code","Error","concat","val","oldVal","LZWDecoder","_BaseDecoder","BaseDecoder","_super","buffer","exports"],"mappings":"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","file":"lzw.2d70a32a.js","sourceRoot":"..\\src","sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"]}